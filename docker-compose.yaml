services:

  redis:
    container_name: redis
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d db53" ]
      interval: 5s
      timeout: 5s
      retries: 5

  grpc_celery:
    container_name: grpc_celery
    build:
      context: grpc_celery
    volumes:
      - ./shared:/app/grpc_app/shared
      - ./shared:/app/celery_app/shared
    env_file:
      - .env
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: postgres

  fastapi:
    container_name: fastapi
    build:
      context: ./fastapi_app
#    ports:
#     - "8000:80"
    volumes:
      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
      - ./shared:/app/db/shared  # Иначе нет доступа к моделям
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      GRPC_HOST: grpc_celery
    command: uvicorn run:app --host 0.0.0.0 --port 8000
    depends_on:
      postgres:
        condition: service_healthy
      grpc_celery:
        condition: service_started


  bot:
    build:
      context: ./bot_app
    container_name: bot
    env_file:
      - .env
    environment:
      WEBSOCKET_HOST: fastapi
#      убрать GRPC после того как перенесу в фастапи
      GRPC_HOST: grpc_celery
      REDIS_HOST: redis
    volumes:
      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
    depends_on:
      redis:
        condition: service_healthy
      fastapi:
        condition: service_started

  django:
    container_name: django
    build:
      context: ./django_app
#    ports:
#     - "8000:8000"
#    volumes:
#      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
#      - ./shared:/app/db/shared  # Иначе нет доступа к моделям
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
    command: gunicorn django_app.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      postgres:
        condition: service_healthy


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./django_app/staticfiles:/django/staticfiles  # Монтируем том для статических файлов
      - ./django_app/mediafiles:/django/mediafiles    # Монтируем том для медиафайлов
    depends_on:
      fastapi:
        condition: service_started
      bot:
        condition: service_started
      django:
        condition: service_started

volumes:
  static_volume:
  media_volume:




