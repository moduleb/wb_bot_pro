services:
  grpc_celery:
    container_name: grpc_celery
    build:
      context: grpc_celery
    deploy:
      replicas: 1
    volumes:
      - ./shared:/app/grpc_app/shared
      - ./shared:/app/celery_app/shared
    env_file:
      - .env
    environment:
      REDIS_HOST: 192.168.0.3
      POSTGRES_HOST: 192.168.0.3

  fastapi:
    container_name: fastapi
    build:
      context: ./fastapi_app
    deploy:
      replicas: 1
#    ports:
#     - "8000:80"
    volumes:
      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
      - ./shared:/app/db/shared  # Иначе нет доступа к моделям
    env_file:
      - .env
    environment:
      POSTGRES_HOST: 192.168.0.3
      GRPC_HOST: grpc_celery
    command: uvicorn run:app --host 0.0.0.0 --port 8000
    depends_on:
      grpc_celery:
        condition: service_started


  bot:
    build:
      context: ./bot_app
    container_name: bot
    deploy:
      replicas: 1
    env_file:
      - .env
    environment:
      WEBSOCKET_HOST: fastapi
#      убрать GRPC после того как перенесу в фастапи
      GRPC_HOST: grpc_celery
      REDIS_HOST: 192.168.0.3
    volumes:
      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
    depends_on:
      fastapi:
        condition: service_started

#  django:
#    container_name: django
#    build:
#      context: ./django_app
#    deploy:
#      replicas: 1
##    ports:
##     - "8000:8000"
##    volumes:
##      - ./shared:/app/shared  # Монтируем локальную папку shared в контейнер
##      - ./shared:/app/db/shared  # Иначе нет доступа к моделям
#    env_file:
#      - .env
#    environment:
#      POSTGRES_HOST: 192.168.0.3
#    command: gunicorn django_app.wsgi:application --bind 0.0.0.0:8000


  nginx:
    image: nginx:latest
    container_name: nginx
    deploy:
      replicas: 1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./django_app/staticfiles:/django/staticfiles  # Монтируем том для статических файлов
      - ./django_app/mediafiles:/django/mediafiles    # Монтируем том для медиафайлов
    depends_on:
      fastapi:
        condition: service_started
      bot:
        condition: service_started
      django:
        condition: service_started

volumes:
  static_volume:
  media_volume:




